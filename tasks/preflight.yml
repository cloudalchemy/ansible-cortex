---
- name: Services should be empty when all-in-one-mode is enabled
  assert:
    that: cortex_all_in_one == (cortex_services|length == 0)
    msg: "Exactly one of cortex_all_in_one or cortex_services should be set."

- name: Assert usage of systemd as an init system
  assert:
    that: ansible_service_mgr == 'systemd'
    msg: "This module only works with systemd"

- name: Get systemd version
  command: systemctl --version
  changed_when: false
  check_mode: false
  register: __systemd_version
  tags:
    - skip_ansible_lint

- name: Get cortex units
  become: true
  command: systemctl list-units cortex@*.service -t service --full --all --plain --no-legend
  changed_when: false
  check_mode: false
  register: __cortex_units
  tags:
    - skip_ansible_lint

- name: List cortex units
  set_fact:
    existing_cortex_units: "{{ __cortex_units.stdout_lines | map('regex_replace','^cortex@([a-z_-]+).service.*','\\1') | list }}"

- name: Set systemd version fact
  set_fact:
    cortex_systemd_version: "{{ __systemd_version.stdout_lines[0].split(' ')[-1] }}"


- block:
    - name: Get latest release
      uri:
        url: "https://api.github.com/repos/cortexproject/cortex/releases/latest"
        method: GET
        return_content: true
        status_code: 200
        body_format: json
        validate_certs: false
        user: "{{ lookup('env', 'GH_USER') | default(omit) }}"
        password: "{{ lookup('env', 'GH_TOKEN') | default(omit) }}"
      no_log: "{{ not lookup('env', 'ANSIBLE_DEBUG') | bool }}"
      register: _latest_release
      until: _latest_release.status == 200
      retries: 5

    - name: "Set cortex version to {{ _latest_release.json.tag_name[1:] }}"
      set_fact:
        cortex_version: "{{ _latest_release.json.tag_name[1:] }}"
  when:
    - cortex_version == "latest"
    - cortex_binary_local_dir | length == 0
    - not cortex_skip_install

- block:
    - name: "Get checksum list"
      set_fact:
        __cortex_checksums: "{{ lookup('url', 'https://github.com/cortexproject/cortex/releases/download/v' + cortex_version + '/cortex-linux-amd64-sha-256', wantlist=True) | list }}"
      run_once: true

    - name: "Get checksum for {{ go_arch }} architecture"
      set_fact:
        __cortex_checksum: "{{ item.split(' ')[0] }}"
      with_items: "{{ __cortex_checksums }}"
  delegate_to: localhost
  when:
    - cortex_binary_local_dir | length == 0
    - not cortex_skip_install

- name: Assert that environment variables are asserted with services
  assert:
    that:
      - "item in cortex_services"
  with_items: "{{ cortex_env_variables }}"
  when: not cortex_all_in_one
