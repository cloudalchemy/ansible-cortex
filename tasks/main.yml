---
- name: Gather variables for each operating system
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution_file_variety | lower }}.yml"
    - "{{ ansible_distribution | lower }}.yml"
    - "{{ ansible_os_family | lower }}.yml"
  tags:
    - cortex_install
    - cortex_configure
    - cortex_run

- import_tasks: preflight.yml
  tags:
    - cortex_install
    - cortex_configure
    - cortex_run

- import_tasks: install.yml
  become: true
  tags:
    - cortex_install

- import_tasks: configure.yml
  become: true
  tags:
    - cortex_configure

- name: Ensure cortex all-in-one is enabled on boot
  become: true
  systemd:
    daemon_reload: true
    name: cortex
    enabled: true
  tags:
    - cortex_run
  when: cortex_all_in_one

- name: ensure cortex all-in-one service is started and enabled
  become: true
  systemd:
    daemon_reload: true
    name: cortex
    state: "{% if cortex_all_in_one %}started{% else %}stopped{%endif%}"
    enabled: "{{ cortex_all_in_one }}"
  tags:
    - cortex_run

- name: Ensure cortex services are disabled on boot
  become: true
  systemd:
    daemon_reload: true
    name: cortex@{{ item }}
    enabled: false
  tags:
    - cortex_run
  when: "item not in cortex_services"
  loop: "{{ existing_cortex_units }}"

- name: Ensure cortex services are stopped
  become: true
  systemd:
    daemon_reload: true
    name: cortex@{{ item }}
    state: "stopped"
    enabled: false
  tags:
    - cortex_run
  when: "item not in cortex_services"
  loop: "{{ existing_cortex_units }}"

- name: Ensure cortex services are enabled on boot
  become: true
  systemd:
    daemon_reload: true
    name: cortex@{{ item.key }}
    enabled: true
  tags:
    - cortex_run
  loop: "{{ cortex_services | dict2items }}"

- name: ensure cortex services are started and enabled
  become: true
  systemd:
    daemon_reload: true
    name: cortex@{{ item.key }}
    state: started
    enabled: true
  tags:
    - cortex_run
  loop: "{{ cortex_services | dict2items }}"
